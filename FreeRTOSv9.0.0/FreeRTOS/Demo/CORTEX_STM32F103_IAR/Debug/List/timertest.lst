###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        03/May/2017  13:42:12
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\BaiduNetdiskDownload\OneNET开发板--资料、软件下载\资料\RTOS资料\FreeRTOS\FreeRTOSv9.0.0\FreeRTOS\Demo\CORTEX_STM32F103_IAR\timertest.c
#    Command line =  
#        E:\BaiduNetdiskDownload\OneNET开发板--资料、软件下载\资料\RTOS资料\FreeRTOS\FreeRTOSv9.0.0\FreeRTOS\Demo\CORTEX_STM32F103_IAR\timertest.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN
#        E:\BaiduNetdiskDownload\OneNET开发板--资料、软件下载\资料\RTOS资料\FreeRTOS\FreeRTOSv9.0.0\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\List\
#        --diag_suppress Pa082,pe191 -o
#        E:\BaiduNetdiskDownload\OneNET开发板--资料、软件下载\资料\RTOS资料\FreeRTOS\FreeRTOSv9.0.0\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\arm\INC\c\DLib_Config_Full.h"
#        -I
#        E:\BaiduNetdiskDownload\OneNET开发板--资料、软件下载\资料\RTOS资料\FreeRTOS\FreeRTOSv9.0.0\FreeRTOS\Demo\CORTEX_STM32F103_IAR\.\
#        -I
#        E:\BaiduNetdiskDownload\OneNET开发板--资料、软件下载\资料\RTOS资料\FreeRTOS\FreeRTOSv9.0.0\FreeRTOS\Demo\CORTEX_STM32F103_IAR\STM32F10xFWLib\inc\
#        -I
#        E:\BaiduNetdiskDownload\OneNET开发板--资料、软件下载\资料\RTOS资料\FreeRTOS\FreeRTOSv9.0.0\FreeRTOS\Demo\CORTEX_STM32F103_IAR\..\..\Source\include\
#        -I
#        E:\BaiduNetdiskDownload\OneNET开发板--资料、软件下载\资料\RTOS资料\FreeRTOS\FreeRTOSv9.0.0\FreeRTOS\Demo\CORTEX_STM32F103_IAR\..\common\include\
#        -Ol --use_c++_inline --require_prototypes
#    List file    =  
#        E:\BaiduNetdiskDownload\OneNET开发板--资料、软件下载\资料\RTOS资料\FreeRTOS\FreeRTOSv9.0.0\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\List\timertest.lst
#    Object file  =  
#        E:\BaiduNetdiskDownload\OneNET开发板--资料、软件下载\资料\RTOS资料\FreeRTOS\FreeRTOSv9.0.0\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\Obj\timertest.o
#
###############################################################################

E:\BaiduNetdiskDownload\OneNET开发板--资料、软件下载\资料\RTOS资料\FreeRTOS\FreeRTOSv9.0.0\FreeRTOS\Demo\CORTEX_STM32F103_IAR\timertest.c
      1          /*
      2              FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
      3              All rights reserved
      4          
      5              VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
      6          
      7              This file is part of the FreeRTOS distribution.
      8          
      9              FreeRTOS is free software; you can redistribute it and/or modify it under
     10              the terms of the GNU General Public License (version 2) as published by the
     11              Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
     12          
     13              ***************************************************************************
     14              >>!   NOTE: The modification to the GPL is included to allow you to     !<<
     15              >>!   distribute a combined work that includes FreeRTOS without being   !<<
     16              >>!   obliged to provide the source code for proprietary components     !<<
     17              >>!   outside of the FreeRTOS kernel.                                   !<<
     18              ***************************************************************************
     19          
     20              FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
     21              WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     22              FOR A PARTICULAR PURPOSE.  Full license text is available on the following
     23              link: http://www.freertos.org/a00114.html
     24          
     25              ***************************************************************************
     26               *                                                                       *
     27               *    FreeRTOS provides completely free yet professionally developed,    *
     28               *    robust, strictly quality controlled, supported, and cross          *
     29               *    platform software that is more than just the market leader, it     *
     30               *    is the industry's de facto standard.                               *
     31               *                                                                       *
     32               *    Help yourself get started quickly while simultaneously helping     *
     33               *    to support the FreeRTOS project by purchasing a FreeRTOS           *
     34               *    tutorial book, reference manual, or both:                          *
     35               *    http://www.FreeRTOS.org/Documentation                              *
     36               *                                                                       *
     37              ***************************************************************************
     38          
     39              http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
     40              the FAQ page "My application does not run, what could be wrong?".  Have you
     41              defined configASSERT()?
     42          
     43              http://www.FreeRTOS.org/support - In return for receiving this top quality
     44              embedded software for free we request you assist our global community by
     45              participating in the support forum.
     46          
     47              http://www.FreeRTOS.org/training - Investing in training allows your team to
     48              be as productive as possible as early as possible.  Now you can receive
     49              FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
     50              Ltd, and the world's leading authority on the world's leading RTOS.
     51          
     52              http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
     53              including FreeRTOS+Trace - an indispensable productivity tool, a DOS
     54              compatible FAT file system, and our tiny thread aware UDP/IP stack.
     55          
     56              http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
     57              Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
     58          
     59              http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
     60              Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
     61              licenses offer ticketed support, indemnification and commercial middleware.
     62          
     63              http://www.SafeRTOS.com - High Integrity Systems also provide a safety
     64              engineered and independently SIL3 certified version for use in safety and
     65              mission critical applications that require provable dependability.
     66          
     67              1 tab == 4 spaces!
     68          */
     69          
     70          /* High speed timer test as described in main.c. */
     71          
     72          /* Scheduler includes. */
     73          #include "FreeRTOS.h"
     74          
     75          /* Library includes. */
     76          #include "stm32f10x_lib.h"
     77          #include "stm32f10x_tim.h"
     78          #include "stm32f10x_map.h"
     79          
     80          /* The set frequency of the interrupt.  Deviations from this are measured as
     81          the jitter. */
     82          #define timerINTERRUPT_FREQUENCY		( ( unsigned short ) 20000 )
     83          
     84          /* The expected time between each of the timer interrupts - if the jitter was
     85          zero. */
     86          #define timerEXPECTED_DIFFERENCE_VALUE	( configCPU_CLOCK_HZ / timerINTERRUPT_FREQUENCY )
     87          
     88          /* The highest available interrupt priority. */
     89          #define timerHIGHEST_PRIORITY			( 0 )
     90          
     91          /* Misc defines. */
     92          #define timerMAX_32BIT_VALUE			( 0xffffffffUL )
     93          #define timerTIMER_1_COUNT_VALUE		( * ( ( unsigned long * ) ( TIMER1_BASE + 0x48 ) ) )
     94          
     95          /* The number of interrupts to pass before we start looking at the jitter. */
     96          #define timerSETTLE_TIME			5
     97          
     98          /*-----------------------------------------------------------*/
     99          
    100          /*
    101           * Configures the two timers used to perform the test.
    102           */
    103          void vSetupTimerTest( void );
    104          
    105          /* Interrupt handler in which the jitter is measured. */
    106          void vTimer2IntHandler( void );
    107          
    108          /* Stores the value of the maximum recorded jitter between interrupts. */
    109          volatile unsigned short usMaxJitter = 0;
    110          
    111          /*-----------------------------------------------------------*/
    112          
    113          void vSetupTimerTest( void )
    114          {
    115          unsigned long ulFrequency;
    116          TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    117          NVIC_InitTypeDef NVIC_InitStructure;
    118          
    119          
    120          	/* Enable timer clocks */
    121          	RCC_APB1PeriphClockCmd( RCC_APB1Periph_TIM2, ENABLE );
    122          	RCC_APB1PeriphClockCmd( RCC_APB1Periph_TIM3, ENABLE );
    123          
    124          	/* Initialise data. */
    125          	TIM_DeInit( TIM2 );
    126          	TIM_DeInit( TIM3 );
    127          	TIM_TimeBaseStructInit( &TIM_TimeBaseStructure );
    128          
    129          	/* Time base configuration for timer 2 - which generates the interrupts. */
    130          	ulFrequency = configCPU_CLOCK_HZ / timerINTERRUPT_FREQUENCY;	
    131          	TIM_TimeBaseStructure.TIM_Period = ( unsigned short ) ( ulFrequency & 0xffffUL );
    132          	TIM_TimeBaseStructure.TIM_Prescaler = 0x0;
    133          	TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;
    134          	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    135          	TIM_TimeBaseInit( TIM2, &TIM_TimeBaseStructure );
    136          	TIM_ARRPreloadConfig( TIM2, ENABLE );
    137          
    138          	
    139          	/* Configuration for timer 3 which is used as a high resolution time
    140          	measurement. */
    141          	TIM_TimeBaseStructure.TIM_Period = ( unsigned short ) 0xffff;
    142          	TIM_TimeBaseInit( TIM3, &TIM_TimeBaseStructure );
    143          	TIM_ARRPreloadConfig( TIM3, ENABLE );
    144          	
    145          	/* Enable TIM2 IT.  TIM3 does not generate an interrupt. */
    146          	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
    147          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    148          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = timerHIGHEST_PRIORITY;
    149          	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    150          	NVIC_Init( &NVIC_InitStructure );	
    151          	TIM_ITConfig( TIM2, TIM_IT_Update, ENABLE );
    152          
    153          	/* Finally, enable both timers. */
    154          	TIM_Cmd( TIM2, ENABLE );
    155          	TIM_Cmd( TIM3, ENABLE );
    156          }
    157          /*-----------------------------------------------------------*/
    158          
    159          void vTimer2IntHandler( void )
    160          {
    161          static unsigned short usLastCount = 0, usSettleCount = 0, usMaxDifference = 0;
    162          unsigned short usThisCount, usDifference;
    163          
    164          	/* Capture the free running timer 3 value as we enter the interrupt. */
    165          	usThisCount = TIM3->CNT;
    166          	
    167          	if( usSettleCount >= timerSETTLE_TIME )
    168          	{
    169          		/* What is the difference between the timer value in this interrupt
    170          		and the value from the last interrupt. */
    171          		usDifference = usThisCount - usLastCount;
    172          
    173          		/* Store the difference in the timer values if it is larger than the
    174          		currently stored largest value.  The difference over and above the
    175          		expected difference will give the 'jitter' in the processing of these
    176          		interrupts. */
    177          		if( usDifference > usMaxDifference )
    178          		{
    179          			usMaxDifference = usDifference;
    180          			usMaxJitter = usMaxDifference - timerEXPECTED_DIFFERENCE_VALUE;
    181          		}
    182          	}
    183          	else
    184          	{
    185          		/* Don't bother storing any values for the first couple of
    186          		interrupts. */
    187          		usSettleCount++;
    188          	}
    189          
    190          	/* Remember what the timer value was this time through, so we can calculate
    191          	the difference the next time through. */
    192          	usLastCount = usThisCount;
    193          
    194              TIM_ClearITPendingBit( TIM2, TIM_IT_Update );
    195          }
    196          
    197          
    198          
    199          
    200          
    201          
    202          
    203          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   vSetupTimerTest
        16   -> NVIC_Init
        16   -> RCC_APB1PeriphClockCmd
        16   -> TIM_ARRPreloadConfig
        16   -> TIM_Cmd
        16   -> TIM_DeInit
        16   -> TIM_ITConfig
        16   -> TIM_TimeBaseInit
        16   -> TIM_TimeBaseStructInit
       8   vTimer2IntHandler
         8   -> TIM_ClearITPendingBit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       2  usLastCount
       2  usMaxDifference
       2  usMaxJitter
       2  usSettleCount
     178  vSetupTimerTest
      76  vTimer2IntHandler

 
   8 bytes in section .bss
 278 bytes in section .text
 
 278 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
